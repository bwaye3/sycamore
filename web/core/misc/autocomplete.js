/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function ($, Drupal) {
<<<<<<< HEAD
  var autocomplete = void 0;
=======
  var autocomplete;
>>>>>>> dev

  function autocompleteSplitValues(value) {
    var result = [];
    var quote = false;
    var current = '';
    var valueLength = value.length;
<<<<<<< HEAD
    var character = void 0;

    for (var i = 0; i < valueLength; i++) {
      character = value.charAt(i);
=======
    var character;

    for (var i = 0; i < valueLength; i++) {
      character = value.charAt(i);

>>>>>>> dev
      if (character === '"') {
        current += character;
        quote = !quote;
      } else if (character === ',' && !quote) {
        result.push(current.trim());
        current = '';
      } else {
        current += character;
      }
    }
<<<<<<< HEAD
=======

>>>>>>> dev
    if (value.length > 0) {
      result.push($.trim(current));
    }

    return result;
  }

  function extractLastTerm(terms) {
    return autocomplete.splitValues(terms).pop();
  }

  function searchHandler(event) {
    var options = autocomplete.options;

    if (options.isComposing) {
      return false;
    }

    var term = autocomplete.extractLastTerm(event.target.value);

    if (term.length > 0 && options.firstCharacterBlacklist.indexOf(term[0]) !== -1) {
      return false;
    }

    return term.length >= options.minLength;
  }

  function sourceData(request, response) {
    var elementId = this.element.attr('id');

    if (!(elementId in autocomplete.cache)) {
      autocomplete.cache[elementId] = {};
    }

    function showSuggestions(suggestions) {
      var tagged = autocomplete.splitValues(request.term);
      var il = tagged.length;
<<<<<<< HEAD
      for (var i = 0; i < il; i++) {
        var index = suggestions.indexOf(tagged[i]);
=======

      for (var i = 0; i < il; i++) {
        var index = suggestions.indexOf(tagged[i]);

>>>>>>> dev
        if (index >= 0) {
          suggestions.splice(index, 1);
        }
      }
<<<<<<< HEAD
=======

>>>>>>> dev
      response(suggestions);
    }

    var term = autocomplete.extractLastTerm(request.term);

    function sourceCallbackHandler(data) {
      autocomplete.cache[elementId][term] = data;
<<<<<<< HEAD

=======
>>>>>>> dev
      showSuggestions(data);
    }

    if (autocomplete.cache[elementId].hasOwnProperty(term)) {
      showSuggestions(autocomplete.cache[elementId][term]);
    } else {
<<<<<<< HEAD
      var options = $.extend({ success: sourceCallbackHandler, data: { q: term } }, autocomplete.ajax);
=======
      var options = $.extend({
        success: sourceCallbackHandler,
        data: {
          q: term
        }
      }, autocomplete.ajax);
>>>>>>> dev
      $.ajax(this.element.attr('data-autocomplete-path'), options);
    }
  }

  function focusHandler() {
    return false;
  }

  function selectHandler(event, ui) {
    var terms = autocomplete.splitValues(event.target.value);
<<<<<<< HEAD

    terms.pop();

    terms.push(ui.item.value);

    event.target.value = terms.join(', ');

=======
    terms.pop();
    terms.push(ui.item.value);
    event.target.value = terms.join(', ');
>>>>>>> dev
    return false;
  }

  function renderItem(ul, item) {
    return $('<li>').append($('<a>').html(item.label)).appendTo(ul);
  }

  Drupal.behaviors.autocomplete = {
    attach: function attach(context) {
      var $autocomplete = $(context).find('input.form-autocomplete').once('autocomplete');
<<<<<<< HEAD
=======

>>>>>>> dev
      if ($autocomplete.length) {
        var blacklist = $autocomplete.attr('data-autocomplete-first-character-blacklist');
        $.extend(autocomplete.options, {
          firstCharacterBlacklist: blacklist || ''
        });
<<<<<<< HEAD

        $autocomplete.autocomplete(autocomplete.options).each(function () {
          $(this).data('ui-autocomplete')._renderItem = autocomplete.options.renderItem;
        });

=======
        $autocomplete.autocomplete(autocomplete.options).each(function () {
          $(this).data('ui-autocomplete')._renderItem = autocomplete.options.renderItem;
        });
>>>>>>> dev
        $autocomplete.on('compositionstart.autocomplete', function () {
          autocomplete.options.isComposing = true;
        });
        $autocomplete.on('compositionend.autocomplete', function () {
          autocomplete.options.isComposing = false;
        });
      }
    },
    detach: function detach(context, settings, trigger) {
      if (trigger === 'unload') {
        $(context).find('input.form-autocomplete').removeOnce('autocomplete').autocomplete('destroy');
      }
    }
  };
<<<<<<< HEAD

  autocomplete = {
    cache: {},

    splitValues: autocompleteSplitValues,
    extractLastTerm: extractLastTerm,

=======
  autocomplete = {
    cache: {},
    splitValues: autocompleteSplitValues,
    extractLastTerm: extractLastTerm,
>>>>>>> dev
    options: {
      source: sourceData,
      focus: focusHandler,
      search: searchHandler,
      select: selectHandler,
      renderItem: renderItem,
      minLength: 1,
<<<<<<< HEAD

      firstCharacterBlacklist: '',

=======
      firstCharacterBlacklist: '',
>>>>>>> dev
      isComposing: false
    },
    ajax: {
      dataType: 'json',
      jsonp: false
    }
  };
<<<<<<< HEAD

=======
>>>>>>> dev
  Drupal.autocomplete = autocomplete;
})(jQuery, Drupal);